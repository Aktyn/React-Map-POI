@import "../global";

.gui {
	pointer-events: none;
	width: 100vw;
	height: 100vh;
	
	$bubbleSize: 200vh;
	
	& > * {
		pointer-events: auto;
		position: absolute;
	}
	
	& > .left-panel, & > .right-panel {
		& > * {
			padding: 5px;
			margin: 5px;
			background-color: #FFF;
			box-shadow: 0px 1px 3px #0006;
			border-radius: 5px;
		}
		
		$slidingGuiTrans: 0.5s cubic-bezier(.36, .07, .19, .97) forwards;
		$totalDelay: 0.7s;
		
		&.left-panel > * {
			transform: translateX(calc(-100% - 20px));
			@keyframes slide-from-left {
				0% {transform: translateX(calc(-100% - 20px))}
				100% {transform: translateX(0)}
			}
			animation: slide-from-left $slidingGuiTrans;
			
			$children: 4;
			@for $i from 1 through $children {
				&:nth-child(#{$i}) {
					animation-delay: $totalDelay * (($i - 1) / $children);
				}
			}
		}
		
		&.right-panel > * {
			transform: translateX(calc(100% + 20px));
			@keyframes slide-from-right {
				0% {transform: translateX(calc(100% + 20px))}
				100% {transform: translateX(0)}
			}
			animation: slide-from-right $slidingGuiTrans;
			
			$children: 2;
			@for $i from 1 through $children {
				&:nth-child(#{$i}) {
					//waits for left panel to finish it's animation
					animation-delay: $totalDelay * (($i - 1) / $children) + $totalDelay;
				}
			}
		}
	}
	
	& > .appearance-container {
		position: fixed;
		left: 0;
		top: 0;
		//width: 256px;
		height: 100%;
		//background-color: #0004;
		box-shadow: 0px 0px 4px #0008;
		
		overflow: hidden;
		
		transition: transform 0s, box-shadow 1s ease-in-out;
		transform: translateX(0%);
		
		&:not(.open) {
			pointer-events: none;
			
			transition: transform $slidingTransition, box-shadow 1s ease-in-out;
			box-shadow: 0px 0px 4px #0000;
			transform: translateX(-100%);
		}
		
		& > .bubble {
			position: absolute;
			
			width: $bubbleSize;
			height: $bubbleSize;
			border-radius: $bubbleSize;
			left: 0px;
			top: 0px;
			//background-color: #fff;
			background-color: nth($blueGrey, 2);
			z-index: -1;
			
			transform: translate((-$bubbleSize/2), (-$bubbleSize/2)) scale(0);
		}
		
		.content {
			z-index: 1;
			opacity: 0;
			transition: opacity 1s 0.4s ease-in-out;
			background-color: #fff;
			
			nav {
				padding: 0px;
				display: grid;
				align-items: center;
				justify-content: end;
				height: $appearanceOptionsNavSize;
				line-height: $appearanceOptionsNavSize;
				background-color: nth($blueGrey, 8);
				
				button {
					font-weight: normal;
					color: nth($blueGrey, 1);
					padding-right: 5px;
				}
				/*.closer {
					width: $appearanceOptionsNavSize * 0.8;
					height: $appearanceOptionsNavSize * 0.8;
					margin: auto $appearanceOptionsNavSize * 0.2 auto auto;
					background: url("../../img/icons/close.svg") center no-repeat;
					background-size: contain;
				}*/
			}
		}
		
		&.open {
			& > .content {
				opacity: 1;
			}
			& > .bubble {
				animation: bubble $bubbleTrans forwards;
			
				@keyframes bubble {
					0% {
						transform: translate((-$bubbleSize/2), (-$bubbleSize/2)) scale(0);
					}
					100% {
						transform: translate((-$bubbleSize/2), (-$bubbleSize/2)) scale(1);
					}
				}
			}
		}
		&:not(.open) {
			& > .content {
				transition: opacity 0s 0.4s ease-in-out;
			}
		}
	}
	
	& > aside {
		right: 0;
		background-color: #2F28;
		height: 100%;
		padding: 20px;
	}
}